What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git create a .git folder to store commits in.
You need this because it's what allows git to do its work.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is where there are files are going to be put into a
repository go.put they don't really "go" there they just are there, whereas
the working directory and repository are the places where the actual files and
old commits go, the staging area is like the road between them. The value this
adds is to let me pick which particular files to add to a commit.

How can you use the staging area to make sure you have one commit per
logical change?

I can use git diff and and the staging area to check on what changes have
been made, and also I can only add the changes to a particular file or set of
files rather than making a commit of every file on a project.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Up until now, the "versions" we've been making have really only been updates,
so branches are what allows us to get into some of the real meat and potatoes
of version control. I could have different branches to work on certain features
while keeping a master.

How do the diagrams help you visualize the branch structure?

The diagrams show how the branches work visually, in a way that is
reminiscent of actual branches in a tree. so viewing the lesson with a diagram,
rather than just seeing a list of commits in a certain branch, is helpful
to get a more complete understanding of what branches are and how they work.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together makes them both into one branch that keeps
changes based on the the two latest commits of the branches that are to be
merged and the commit where the the two branches initiated. It also lists the
commits in chronological order, but if you need to compare a commit to it's
parent, you can use the git show command. we represented it
in the diagram the way we do because that's they way that makes the most sense
visually.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
 manually?

pros of automatic merging:
  -It's faster
  -git is pretty smart about how it chooses to do automatic merges
  -if git runs into a conflict, it will let you know, rather than attempting
  what it thinks is best and breaking the code
cons of auto merging:
  -not the best in all situations
  -one could run into a situation where git does the merging and it does
  something wrong and its hard to find record of it.

pros of always doing it manually:
  -wouldn't be able to blame git if something gets messed up
cons of manual merge:
  -potential for user error
  -time consuming
  -i wouldn't know how.
